
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__PendulumEnvProxy_h__PROXY_MARSHAL_H
#define __dbusxx__PendulumEnvProxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace gym {
namespace pendulum {

class env_proxy
: public ::DBus::InterfaceProxy
{
public:

    env_proxy()
    : ::DBus::InterfaceProxy("gym.pendulum.env")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< double > reset()
    {
        ::DBus::CallMessage call;
        call.member("reset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< double > argout;
        ri >> argout;
        return argout;
    }

    void step(const double& action, std::vector< double >& argout0, double& argout1, bool& argout2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << action;
        call.member("step");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> argout0;
        ri >> argout1;
        ri >> argout2;
    }

    void render()
    {
        ::DBus::CallMessage call;
        call.member("render");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__PendulumEnvProxy_h__PROXY_MARSHAL_H

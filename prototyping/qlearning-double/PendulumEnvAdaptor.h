
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__PendulumEnvAdaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__PendulumEnvAdaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace gym {
namespace pendulum {

class env_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    env_adaptor()
    : ::DBus::InterfaceAdaptor("gym.pendulum.env")
    {
        register_method(env_adaptor, reset, _reset_stub);
        register_method(env_adaptor, step, _step_stub);
        register_method(env_adaptor, render, _render_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument reset_args[] = 
        {
            { 0, "ad", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument step_args[] = 
        {
            { "action", "d", true },
            { 0, "ad", false },
            { 0, "d", false },
            { 0, "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument render_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod env_adaptor_methods[] = 
        {
            { "reset", reset_args },
            { "step", step_args },
            { "render", render_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod env_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty env_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface env_adaptor_interface = 
        {
            "gym.pendulum.env",
            env_adaptor_methods,
            env_adaptor_signals,
            env_adaptor_properties
        };
        return &env_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< double > reset() = 0;
    virtual void step(const double& action, std::vector< double >& , double& , bool& ) = 0;
    virtual void render() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _reset_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< double > argout1 = reset();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _step_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        double argin1; ri >> argin1;
        std::vector< double > argout1;
        double argout2;
        bool argout3;
        step(argin1, argout1, argout2, argout3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        wi << argout3;
        return reply;
    }
    ::DBus::Message _render_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        render();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__PendulumEnvAdaptor_h__ADAPTOR_MARSHAL_H
